#!/usr/bin/env python3

import time

from pathlib import Path

# these are sample vaules
IDLE_TEMP = 50
SPINUP_TEMP = 58
# the speed gets mutiplied with 1000 and written to
# /sys/class/pwm/pwmchip0/pwm0/duty_cycle - I had mixed results
# using other values than 100000 as `period` when setting up the
# PWM chip, so I advise against changing this; in any case, the
# setup is done in /sys/class/pwm/pwmchip0/pwm0/period
MAX_SPEED=100
# MIN_SPEED should be set to the lowest value that still spins up the fan
# wouthout coil whine, you need to find out for yourself
MIN_SPEED=40


def init():
    with open("/sys/class/pwm/pwmchip0/export", "w") as file:
        file.write("0")
    with open("/sys/class/pwm/pwmchip0/pwm0/period", "w") as file:
        file.write(str(int(MAX_SPEED*1000)))
    with open("/sys/class/pwm/pwmchip0/pwm0/polarity", "w") as file:
        file.write("normal")
    with open("/sys/class/pwm/pwmchip0/pwm0/enable", "w") as file:
        file.write("1")
    with open("/sys/class/pwm/pwmchip0/pwm0/duty_cycle", "w") as file:
        file.write("0")


def read_temp():
    with open("/sys/devices/virtual/thermal/thermal_zone0/temp", "r") as file:
        temp_raw = file.read()
    temp = int(temp_raw) / 1000
    return temp


def set_fanspeed(speed):
    with open("/sys/class/pwm/pwmchip0/pwm0/duty_cycle", "w") as file:
        file.write(str(int(speed * 1000)))


# this is the place to go crazy with fan curves and so on
def compute_fanspeed(temp):
    if temp > 75:
        speed = MAX_SPEED
    elif temp > 69:
        speed = 80
    else:
        speed = MIN_SPEED
    return speed


if not Path("/sys/class/pwm/pwmchip0/pwm0/duty_cycle").exists():
    init()

while True:
    temp = read_temp()
    if temp >= SPINUP_TEMP:
        while temp >= IDLE_TEMP:
            set_fanspeed(compute_fanspeed(temp))
            time.sleep(2)
            temp = read_temp()
    else:
        set_fanspeed(0)
    time.sleep(2)
